// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: 000001_users_query.up.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    id,  username, email,  password, created_at, updated_at
) VALUES (
          $1, $2, $3, $4, $5, $6
) RETURNING id, full_name, username, email, photo, user_active, verified_email, password, created_at, updated_at
`

type CreateUserParams struct {
	ID        pgtype.UUID
	Username  pgtype.Text
	Email     string
	Password  string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Photo,
		&i.UserActive,
		&i.VerifiedEmail,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const deleteUserByEmail = `-- name: DeleteUserByEmail :one
DELETE FROM users WHERE email = $1 RETURNING id, full_name, username, email, photo, user_active, verified_email, password, created_at, updated_at
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, deleteUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Photo,
		&i.UserActive,
		&i.VerifiedEmail,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUser = `-- name: GetUser :many
SELECT id, full_name, username, email, photo, user_active, verified_email, password, created_at, updated_at FROM users
`

func (q *Queries) GetUser(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, getUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Username,
			&i.Email,
			&i.Photo,
			&i.UserActive,
			&i.VerifiedEmail,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, username, email, photo, user_active, verified_email, password, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Photo,
		&i.UserActive,
		&i.VerifiedEmail,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, full_name, username, email, photo, user_active, verified_email, password, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id pgtype.UUID) (*User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Photo,
		&i.UserActive,
		&i.VerifiedEmail,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET verified_email = $2, updated_at = $3 WHERE email = $1 RETURNING id, full_name, username, email, photo, user_active, verified_email, password, created_at, updated_at
`

type UpdateUserParams struct {
	Email         string
	VerifiedEmail bool
	UpdatedAt     pgtype.Timestamp
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.Email, arg.VerifiedEmail, arg.UpdatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Photo,
		&i.UserActive,
		&i.VerifiedEmail,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
