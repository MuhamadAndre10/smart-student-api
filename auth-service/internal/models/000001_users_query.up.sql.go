// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: 000001_users_query.up.sql

package models

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUsers = `-- name: CreateUsers :one
INSERT INTO users(
    id, full_name, username, email, photo, user_active, password, created_at, updated_at
) VALUES (
          $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, full_name, username, email, photo, user_active, password, created_at, updated_at
`

type CreateUsersParams struct {
	ID         pgtype.Int4
	FullName   string
	Username   string
	Email      string
	Photo      pgtype.Text
	UserActive bool
	Password   string
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

func (q *Queries) CreateUsers(ctx context.Context, arg CreateUsersParams) (User, error) {
	row := q.db.QueryRow(ctx, createUsers,
		arg.ID,
		arg.FullName,
		arg.Username,
		arg.Email,
		arg.Photo,
		arg.UserActive,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Photo,
		&i.UserActive,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :many
SELECT id, full_name, username, email, photo, user_active, password, created_at, updated_at FROM users
`

func (q *Queries) GetUser(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Username,
			&i.Email,
			&i.Photo,
			&i.UserActive,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, full_name, username, email, photo, user_active, password, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Username,
		&i.Email,
		&i.Photo,
		&i.UserActive,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
